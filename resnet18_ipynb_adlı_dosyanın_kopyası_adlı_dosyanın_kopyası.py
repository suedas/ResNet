# -*- coding: utf-8 -*-
"""ResNet18.ipynb adlı dosyanın kopyası adlı dosyanın kopyası

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G6D-SwGuunf60hvImCm4Wh8JbwFmoPUx

# Yeni Bölüm
"""

import numpy as np
import os
import random
import matplotlib.pyplot as plt
from keras.models import Sequential
from keras.layers.core import Dense, Flatten, Dropout
from keras.layers import Conv2D,MaxPooling2D, ZeroPadding2D,Input,Concatenate,AveragePooling2D,BatchNormalization
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing.image import ImageDataGenerator
from keras.utils import np_utils
from keras import Model

from google.colab import drive
drive.mount("/content/drive")

trainPath="/content/drive/MyDrive/Derinogrenme/Covid/Data/train"
testPath="/content/drive/MyDrive/Derinogrenme/Covid/Data/test"
validPath="/content/drive/MyDrive/Derinogrenme/Covid/Data/val"

trainDataGen=ImageDataGenerator(
    rescale=1./255,

)

trainDataGen=ImageDataGenerator(rescale=1./255)
testDataGen=ImageDataGenerator(rescale=1./255)
valDataGen=ImageDataGenerator(rescale=1./255)

trainGen=trainDataGen.flow_from_directory(
    trainPath,
    target_size=(224,224),
    color_mode='rgb',
    class_mode='categorical',
    batch_size=32,
 )

valGen=valDataGen.flow_from_directory(
     validPath,
    target_size=(224,224),
    color_mode='rgb',
    class_mode='categorical',
    batch_size=32,
    )

testGen=testDataGen.flow_from_directory(
    testPath,
    target_size=(224,224),
    color_mode='rgb',
    class_mode='categorical',
    batch_size=1)

!pip install git+https://github.com/qubvel/classification_models.git

import keras

from classification_models.keras import Classifiers

# for tensorflow.keras
# from classification_models.tfkeras import Classifiers

ResNet18, preprocess_input = Classifiers.get('resnet18')
#X = trainGen
#X = preprocess_input(X)

base_model = ResNet18(input_shape=(224,224,3), weights='imagenet', include_top=False)

x = base_model.output

x = AveragePooling2D()(x)

x = Flatten()(x)
x = Dense(512, activation='relu')(x)
x = Dropout(0.4)(x)
x = Dense(4, activation='softmax')(x)

model = Model(base_model.input, x)

model.compile(loss='categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])

history = model.fit(trainGen, validation_data=valGen, epochs=10, batch_size=32)

fig, axs = plt.subplots(2, 1, figsize=(15,15))
axs[0].plot(history.history['loss'])
axs[0].plot(history.history['val_loss'])
axs[0].title.set_text('Training Loss vs Validation Loss')
axs[0].set_xlabel('Epochs')
axs[0].set_ylabel('Loss')
axs[0].legend(['Train','Val'])
axs[1].plot(history.history['accuracy'])
axs[1].plot(history.history['val_accuracy'])
axs[1].title.set_text('Training Accuracy vs Validation Accuracy')
axs[1].set_xlabel('Epochs')
axs[1].set_ylabel('Accuracy')
axs[1].legend(['Train', 'Val'])

from sklearn.metrics import classification_report,confusion_matrix
categori=["COVID-19","Normal","Pneumonia-Bacterial","Pneumonia-Viral"]


y_pred=np.argmax(model.predict(testGen),axis=1)

import seaborn as sns

cm = confusion_matrix(testGen.classes,y_pred)
ax = sns.heatmap(cm, annot=True, xticklabels=categori, yticklabels=categori,
                cbar=False,cmap='Greens')
ax.set_xlabel('Prediction')
ax.set_ylabel('Actual')
plt.show()